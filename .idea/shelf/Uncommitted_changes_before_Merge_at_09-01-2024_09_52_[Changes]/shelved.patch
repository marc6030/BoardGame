Index: app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\n\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.expandIn\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.scaleIn\r\nimport androidx.compose.animation.scaleOut\r\nimport androidx.compose.animation.shrinkOut\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.animation.slideOutVertically\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.pager.VerticalPager\r\nimport androidx.compose.foundation.pager.rememberPagerState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Favorite\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material.icons.filled.MoreVert\r\nimport androidx.compose.material.icons.filled.Star\r\nimport androidx.compose.material.icons.outlined.FavoriteBorder\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.blur\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.drawWithContent\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.ColorFilter\r\nimport androidx.compose.ui.graphics.ColorMatrix\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.window.Popup\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImage\r\nimport com.example.myapplication.modelviews.BoardDataViewModel\r\nimport com.example.myapplication.modelviews.FavoriteViewModel\r\nimport com.example.myapplication.modelviews.RatingsViewModel\r\nimport com.example.myapplication.modelviews.SharedViewModel\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n\r\n@Composable\r\nfun SimpleBoardGameInfoActivity(navController: NavHostController,\r\n        boardDataViewModel: BoardDataViewModel,\r\n        ratingsViewModel: RatingsViewModel,\r\n        favoriteViewModel: FavoriteViewModel,\r\n        sharedViewModel: SharedViewModel\r\n) {\r\n    val pagerState = rememberPagerState(initialPage = 0, pageCount = { 2 })\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var selectedTabIndex by remember { mutableStateOf(0) }\r\n\r\n    // Use LaunchedEffect peoples! Is much importante!\r\n    // boardDataViewModel.fetchBoardGameData(sharedViewModel.currentGameID)\r\n    ratingsViewModel.fetchRatings(sharedViewModel.currentGameID)\r\n    favoriteViewModel.fetchFavoriteListFromDB()\r\n\r\n\r\n    val colorMatrixDark = ColorMatrix().apply {\r\n        setToScale(0.2f, 0.2f, 0.2f, 1f)\r\n    }\r\n    val textStyleBody1 = MaterialTheme.typography.headlineLarge.copy(fontSize = 50.sp)\r\n    var textStyle by remember {mutableStateOf(textStyleBody1)}\r\n    var readyToDraw by remember { mutableStateOf(false) }\r\n    var boardGame =\r\n        sharedViewModel.boardGameData // It IS a var. It will not work as intended as a val. Trust me bro\r\n    // val boardGameIsFavourite by viewModel.isBoardGameFavourite.observeAsState()\r\n    DisposableEffect(boardGame!!.name) {\r\n        textStyle = textStyleBody1\r\n        readyToDraw = false\r\n        onDispose { }\r\n    }\r\n\r\n    AsyncImage(\r\n        model = boardGame.imageURL,\r\n        contentDescription = null,\r\n        contentScale = ContentScale.Crop,\r\n        alignment = Alignment.Center,\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .blur(30.dp)\r\n            .scale(1.5f)\r\n            .animateContentSize(),\r\n        colorFilter = ColorFilter.colorMatrix(colorMatrixDark)\r\n    )\r\n\r\n    VerticalPager(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .clickable(enabled = sharedViewModel.openRatingPopUp || sharedViewModel.openAddPopUp) {\r\n                sharedViewModel.openRatingPopUp = false\r\n                sharedViewModel.openAddPopUp = false\r\n            },\r\n        state = pagerState,\r\n        pageContent = { page ->\r\n            when (page) {\r\n                0 -> {\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxSize()\r\n                                .padding(16.dp)\r\n                        ) {\r\n                            Spacer(modifier = Modifier.height(35.dp))\r\n                            Column(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.9f)\r\n                                    .clip(RoundedCornerShape(20.dp))\r\n                                    .background(Color.Black)\r\n                            ) {\r\n                                Spacer(modifier = Modifier.height(10.dp))\r\n                                Text(\r\n                                    text = boardGame!!.name,\r\n                                    style = textStyle,\r\n                                    fontWeight = FontWeight.Bold,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .fillMaxHeight(0.2f)\r\n                                        .padding(20.dp)\r\n                                        .drawWithContent {\r\n                                            if (readyToDraw) drawContent()\r\n                                        },\r\n                                    textAlign = TextAlign.Center,\r\n                                    color = Color.White,\r\n                                    overflow = TextOverflow.Clip,\r\n                                    onTextLayout = { textLayoutResult ->\r\n                                        if (textLayoutResult.didOverflowHeight) {\r\n                                            textStyle =\r\n                                                textStyle.copy(fontSize = textStyle.fontSize * 0.9)\r\n                                        } else {\r\n                                            readyToDraw = true\r\n                                        }\r\n                                    }\r\n                                )\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .fillMaxHeight(0.67f)\r\n                                        .padding(10.dp)\r\n                                ) {\r\n                                    AsyncImage(\r\n                                        model = boardGame.imageURL,\r\n                                        contentDescription = null,\r\n                                        contentScale = ContentScale.Crop,\r\n                                        alignment = Alignment.Center,\r\n                                        modifier = Modifier\r\n                                            .fillMaxSize()\r\n                                            .clip(CircleShape)\r\n                                    )\r\n                                }\r\n                                Row(\r\n                                    modifier = Modifier\r\n                                        .fillMaxHeight(0.8f)\r\n                                        .padding(10.dp)\r\n                                        .fillMaxWidth(0.5f)\r\n                                        .align(Alignment.CenterHorizontally)\r\n                                        .background(Color.Transparent),\r\n                                    horizontalArrangement = Arrangement.SpaceEvenly,\r\n                                ) {\r\n                                    Column(\r\n                                        modifier = Modifier\r\n                                            .fillMaxHeight()\r\n                                            .fillMaxWidth(0.5f),\r\n                                        verticalArrangement = Arrangement.SpaceAround,\r\n                                        horizontalAlignment = Alignment.CenterHorizontally\r\n\r\n                                    ) {\r\n                                        Image(\r\n                                            painter = painterResource(id = R.drawable.people_alt),\r\n                                            contentDescription = null,\r\n                                            colorFilter = ColorFilter.tint(Color.White)\r\n                                        )\r\n                                        Text(\r\n                                            text = \"${boardGame.minPlayers} - ${boardGame.maxPlayers}\",\r\n                                            style = MaterialTheme.typography.bodyLarge,\r\n                                            modifier = Modifier.fillMaxWidth(),\r\n                                            textAlign = TextAlign.Center,\r\n                                            fontWeight = FontWeight.Bold,\r\n                                            color = Color.White\r\n                                        )\r\n\r\n                                        Image(\r\n                                            painter = painterResource(id = R.drawable.av_timer),\r\n                                            contentDescription = null,\r\n                                            colorFilter = ColorFilter.tint(Color.White)\r\n                                        )\r\n                                        Text(\r\n                                            text = \"${boardGame.playingTime} min.\",\r\n                                            style = MaterialTheme.typography.bodyLarge,\r\n                                            modifier = Modifier.fillMaxWidth(),\r\n                                            textAlign = TextAlign.Center,\r\n                                            fontWeight = FontWeight.Bold,\r\n                                            color = Color.White\r\n                                        )\r\n\r\n                                    }\r\n                                    Column(\r\n                                        modifier = Modifier\r\n                                            .fillMaxHeight()\r\n                                            .fillMaxWidth(1f),\r\n                                        verticalArrangement = Arrangement.SpaceAround,\r\n                                        horizontalAlignment = Alignment.CenterHorizontally\r\n                                    ) {\r\n                                        Image(\r\n                                            painter = painterResource(id = R.drawable.elderly),\r\n                                            contentDescription = null,\r\n                                            colorFilter = ColorFilter.tint(Color.White)\r\n                                        )\r\n                                        Text(\r\n                                            text = \"${boardGame.age}+\",\r\n                                            style = MaterialTheme.typography.bodyLarge,\r\n                                            modifier = Modifier.fillMaxWidth(),\r\n                                            textAlign = TextAlign.Center,\r\n                                            fontWeight = FontWeight.Bold,\r\n                                            color = Color.White\r\n                                        )\r\n\r\n                                        Image(\r\n                                            painter = painterResource(id = R.drawable.fitness_center),\r\n                                            contentDescription = null,\r\n                                            colorFilter = ColorFilter.tint(Color.White)\r\n                                        )\r\n                                        Text(\r\n                                            text = boardGame.averageWeight,\r\n                                            style = MaterialTheme.typography.bodyLarge,\r\n                                            modifier = Modifier.fillMaxWidth(),\r\n                                            textAlign = TextAlign.Center,\r\n                                            fontWeight = FontWeight.Bold,\r\n                                            color = Color.White\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        Box(modifier = Modifier.fillMaxSize()) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.85f)\r\n                                    .fillMaxHeight(0.863f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.Check,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(45.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomStart)\r\n                                        .clickable {\r\n                                            sharedViewModel.openRatingPopUp =\r\n                                                !sharedViewModel.openRatingPopUp\r\n                                        },\r\n                                    tint = Color.DarkGray\r\n                                )\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.Add,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(45.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomEnd)\r\n                                        .clickable {\r\n                                            sharedViewModel.openAddPopUp =\r\n                                                !sharedViewModel.openAddPopUp\r\n                                        },\r\n                                    tint = Color.White,\r\n                                )\r\n                            }\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.845f)\r\n                                    .align(Alignment.TopStart)) {\r\n                                    Text(\r\n                                        text = boardGame.ratingBGG,\r\n                                        style = MaterialTheme.typography.bodyLarge,\r\n                                        modifier = Modifier\r\n                                            .fillMaxWidth(0.292f)\r\n                                            .align(Alignment.Bottom),\r\n                                        textAlign = TextAlign.Center,\r\n                                        fontWeight = FontWeight.Bold,\r\n                                        color = Color.White,\r\n                                        fontSize = 16.sp\r\n                                    )\r\n                            }\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.798f)\r\n                                    .fillMaxHeight(0.845f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                            }\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(1f)\r\n                                    .fillMaxHeight(0.963f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.KeyboardArrowDown,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(60.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomCenter)\r\n                                        .clickable {\r\n                                            coroutineScope.launch {\r\n                                                pagerState.animateScrollToPage(1)\r\n                                            }\r\n                                        },\r\n                                    tint = Color.White,\r\n                                )\r\n                            }\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.693f)\r\n                                    .fillMaxHeight(0.823f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.Star,\r\n                                    contentDescription = \"contentdescription\",\r\n                                    modifier = Modifier\r\n                                        .size(25.dp)\r\n                                        .align(Alignment.BottomStart)\r\n                                        .background(Color.Gray, CircleShape)\r\n                                        .clickable {\r\n                                            sharedViewModel.openRatingPopUp =\r\n                                                !sharedViewModel.openRatingPopUp\r\n                                        },\r\n                                    tint = Color.White\r\n                                )\r\n                            }\r\n                        }\r\n                        AnimatedVisibility(\r\n                            visible = sharedViewModel.openRatingPopUp,\r\n                            enter = slideInVertically(),\r\n                            exit = slideOutVertically()\r\n                        ) {\r\n                            PopupRatingDialog(\r\n                                boardGame = boardGame,\r\n                                viewModel = ratingsViewModel\r\n                            )\r\n                        }\r\n                        AnimatedVisibility(\r\n                            visible = sharedViewModel.openAddPopUp,\r\n                            enter = slideInVertically(),\r\n                            exit = slideOutVertically()\r\n                        ) {\r\n                            PopupAddDialog()\r\n                        }\r\n                        favoriteButton(viewModel = favoriteViewModel, sharedViewModel = sharedViewModel)\r\n                    }\r\n                }\r\n                1 -> {\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxSize()\r\n                                .padding(16.dp),\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.6f)\r\n                                    .padding(10.dp)\r\n                                    .clip(RoundedCornerShape(10.dp))\r\n                                    .background(MaterialTheme.colorScheme.background)\r\n                                    .align(Alignment.CenterHorizontally),\r\n                            ) {\r\n                                Column() {\r\n                                    tabView(\r\n                                        texts = listOf(\r\n                                            \"Description\",\r\n                                            \"General Info\"\r\n                                        )\r\n                                        ) {\r\n                                        selectedTabIndex = it;\r\n                                    }\r\n                                    when (selectedTabIndex) {\r\n                                        0 -> description(\r\n                                            boardGame!!\r\n                                        )\r\n\r\n                                        1 -> generalInfo(\r\n                                            boardGame!!\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Row {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(1f)\r\n                                    .fillMaxHeight(0.225f)\r\n                                    .align(Alignment.CenterVertically)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.KeyboardArrowUp,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(60.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomCenter)\r\n                                        .clickable {\r\n                                            coroutineScope.launch {\r\n                                                pagerState.animateScrollToPage(0)\r\n                                            }\r\n                                        },\r\n                                    tint = Color.White,\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    )\r\n    Button(\r\n        onClick = {\r\n            navController.popBackStack()\r\n            coroutineScope.launch {\r\n                textStyle.copy(fontSize = 50.sp)\r\n            }\r\n        },\r\n        modifier = Modifier\r\n            .width(60.dp)\r\n            .height(60.dp)\r\n            .padding(8.dp),\r\n        colors = ButtonDefaults.buttonColors(Color.Transparent)\r\n    ) {\r\n    }\r\n    Image(\r\n        painter = painterResource(id = R.drawable.ic_action_back),\r\n        contentDescription = null,\r\n        modifier = Modifier\r\n            .padding(18.dp)\r\n    )\r\n}\r\n@Composable\r\nfun PopupRatingDialog(boardGame: BoardGame, viewModel: RatingsViewModel) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .fillMaxHeight()\r\n                .padding(horizontal = 20.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            Box {\r\n                val popupWidth = 350.dp\r\n                val popupHeight = 220.dp\r\n                    Popup(\r\n                        alignment = Alignment.Center,\r\n                        properties = PopupProperties()\r\n                    ) {\r\n                        Box(\r\n                            Modifier\r\n                                .size(popupWidth, popupHeight)\r\n                                .padding(top = 5.dp)\r\n                                .background(Color.DarkGray, RoundedCornerShape(10.dp))\r\n                        ) {\r\n                            Column(\r\n                                modifier = Modifier\r\n                                    .fillMaxSize(),\r\n                                horizontalAlignment = Alignment.CenterHorizontally,\r\n                                verticalArrangement = Arrangement.Center\r\n                            ) {\r\n                                ratingTab(boardGame = boardGame, viewModel = viewModel)\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PopupAddDialog() {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxHeight(0.5f)\r\n            .padding(horizontal = 20.dp),\r\n        verticalArrangement = Arrangement.Bottom,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Box {\r\n            Popup(\r\n                alignment = Alignment.Center,\r\n                properties = PopupProperties()\r\n            ) {\r\n                Box(\r\n                    Modifier\r\n                        .size(450.dp, 300.dp)\r\n                        .padding(top = 5.dp)\r\n                        .background(Color.DarkGray, RoundedCornerShape(10.dp))\r\n                ) {\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxSize(),\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        verticalArrangement = Arrangement.Center\r\n                    ) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt b/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt
--- a/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt	(revision 9a05189f02e80728a74700be3c83972d57b57db2)
+++ b/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt	(date 1704790358833)
@@ -1,6 +1,7 @@
 package com.example.myapplication
 
 
+import android.annotation.SuppressLint
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.animation.animateContentSize
 import androidx.compose.animation.core.tween
@@ -490,6 +491,7 @@
             .padding(18.dp)
     )
 }
+
 @Composable
 fun PopupRatingDialog(boardGame: BoardGame, viewModel: RatingsViewModel) {
         Column(
@@ -501,15 +503,13 @@
             verticalArrangement = Arrangement.Center
         ) {
             Box {
-                val popupWidth = 350.dp
-                val popupHeight = 220.dp
                     Popup(
                         alignment = Alignment.Center,
                         properties = PopupProperties()
                     ) {
                         Box(
                             Modifier
-                                .size(popupWidth, popupHeight)
+                                .size(350.dp, 220.dp)
                                 .padding(top = 5.dp)
                                 .background(Color.DarkGray, RoundedCornerShape(10.dp))
                         ) {
