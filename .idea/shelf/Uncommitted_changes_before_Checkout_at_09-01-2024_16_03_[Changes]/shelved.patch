Index: app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\n\r\nimport androidx.compose.animation.animateContentSize\r\nimport android.annotation.SuppressLint\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.expandIn\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.scaleIn\r\nimport androidx.compose.animation.scaleOut\r\nimport androidx.compose.animation.shrinkOut\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.animation.slideOutVertically\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.paddingFrom\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentWidth\r\nimport androidx.compose.foundation.pager.VerticalPager\r\nimport androidx.compose.foundation.pager.rememberPagerState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Favorite\r\nimport androidx.compose.material.icons.filled.AddCircle\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Info\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material.icons.filled.MoreVert\r\nimport androidx.compose.material.icons.filled.PlayArrow\r\nimport androidx.compose.material.icons.filled.Star\r\nimport androidx.compose.material.icons.outlined.FavoriteBorder\r\nimport androidx.compose.material.icons.outlined.Star\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Snackbar\r\nimport androidx.compose.material3.SnackbarDuration\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SnackbarResult\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.alpha\r\nimport androidx.compose.ui.draw.blur\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.drawWithContent\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.ColorFilter\r\nimport androidx.compose.ui.graphics.ColorMatrix\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.platform.LocalLifecycleOwner\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImage\r\nimport com.example.myapplication.modelviews.BoardGameInfoActivity\r\nimport com.example.myapplication.modelviews.FavoriteViewModel\r\nimport com.example.myapplication.modelviews.RatingsViewModel\r\nimport com.example.myapplication.views.YoutubePlayer\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport BoardGameRepository\r\nimport android.util.Log\r\nimport androidx.compose.ui.window.Popup\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport androidx.lifecycle.viewModelScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlin.random.Random\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun SimpleBoardGameInfoActivity(navController: NavHostController,\r\n                                ratingsViewModel: RatingsViewModel,\r\n                                boardGameInfoActivity: BoardGameInfoActivity,\r\n                                gameID: String\r\n) {\r\n    val pagerState = rememberPagerState(initialPage = 0, pageCount = { 2 })\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var selectedTabIndex by remember { mutableStateOf(0) }\r\n\r\n    LaunchedEffect(Unit) {\r\n        // Use LaunchedEffect peoples! Is much importante!\r\n        boardGameInfoActivity.fetchBoardGameData(gameID)\r\n        ratingsViewModel.fetchRatings(boardGameInfoActivity.currentGameID)\r\n\r\n    }\r\n\r\n    val colorMatrixDark = ColorMatrix().apply {\r\n        setToScale(0.2f, 0.2f, 0.2f, 1f)\r\n    }\r\n\r\n    var boardGame =\r\n        boardGameInfoActivity.boardGameData // It IS a var. It will not work as intended as a val. Trust me bro\r\n    val textStyleBody1 = MaterialTheme.typography.headlineLarge.copy(fontSize = 50.sp)\r\n    var textStyle by remember { mutableStateOf(textStyleBody1) }\r\n    var readyToDraw by remember { mutableStateOf(false) }\r\n\r\n    boardGameInfoActivity.fetchYoutubeID(boardGame.name)\r\n\r\n\r\n\r\n    // val boardGameIsFavourite by viewModel.isBoardGameFavourite.observeAsState()\r\n    DisposableEffect(boardGame!!.name) {\r\n        textStyle = textStyleBody1\r\n        readyToDraw = false\r\n        onDispose { }\r\n    }\r\n\r\n    AsyncImage(\r\n        model = boardGame.imageURL,\r\n        contentDescription = null,\r\n        contentScale = ContentScale.Crop,\r\n        alignment = Alignment.Center,\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .blur(30.dp)\r\n            .scale(1.3f)\r\n            .animateContentSize(),\r\n        colorFilter = ColorFilter.colorMatrix(colorMatrixDark)\r\n    )\r\n    VerticalPager(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .clickable(enabled = boardGameInfoActivity.openRatingPopUp || boardGameInfoActivity.openAddPopUp) {\r\n                boardGameInfoActivity.openRatingPopUp = false\r\n                boardGameInfoActivity.openAddPopUp = false\r\n            },\r\n        state = pagerState,\r\n        pageContent = { page ->\r\n            when (page) {\r\n                0 -> {\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxSize()\r\n                                .padding(16.dp)\r\n                        ) {\r\n                            Spacer(modifier = Modifier.height(35.dp))\r\n                            Column(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.9f)\r\n                                    .clip(RoundedCornerShape(20.dp))\r\n                                    .background(Color.Black)\r\n                            ) {\r\n                                Spacer(modifier = Modifier.height(10.dp))\r\n                                Text(\r\n                                    text = boardGame!!.name,\r\n                                    style = textStyle,\r\n                                    fontWeight = FontWeight.Bold,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .fillMaxHeight(0.2f)\r\n                                        .padding(20.dp, 30.dp, 20.dp, 20.dp)\r\n                                        .drawWithContent {\r\n                                            if (readyToDraw) drawContent()\r\n                                        },\r\n                                    textAlign = TextAlign.Center,\r\n                                    color = Color.White,\r\n                                    overflow = TextOverflow.Clip,\r\n                                    onTextLayout = { textLayoutResult ->\r\n                                        if (textLayoutResult.didOverflowHeight) {\r\n                                            textStyle =\r\n                                                textStyle.copy(fontSize = textStyle.fontSize * 0.9)\r\n                                        } else {\r\n                                            readyToDraw = true\r\n                                        }\r\n                                    }\r\n                                )\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .fillMaxHeight(0.67f)\r\n                                        .padding(10.dp)\r\n                                ) {\r\n                                    AsyncImage(\r\n                                        model = boardGame.imageURL,\r\n                                        contentDescription = null,\r\n                                        contentScale = ContentScale.Crop,\r\n                                        alignment = Alignment.Center,\r\n                                        modifier = Modifier\r\n                                            .fillMaxSize()\r\n                                            .clip(CircleShape)\r\n                                    )\r\n                                }\r\n                                Row(\r\n                                    modifier = Modifier\r\n                                        .fillMaxHeight(0.8f)\r\n                                        .padding(10.dp)\r\n                                        .fillMaxWidth(0.5f)\r\n                                        .align(Alignment.CenterHorizontally)\r\n                                        .background(Color.Transparent),\r\n                                    horizontalArrangement = Arrangement.SpaceEvenly,\r\n                                ) {\r\n                                    Column(\r\n                                        modifier = Modifier\r\n                                            .fillMaxHeight()\r\n                                            .fillMaxWidth(0.5f),\r\n                                        verticalArrangement = Arrangement.SpaceAround,\r\n                                        horizontalAlignment = Alignment.CenterHorizontally\r\n                                    ){\r\n                                            Image(\r\n                                                painter = painterResource(id = R.drawable.people_alt),\r\n                                                contentDescription = null,\r\n                                                colorFilter = ColorFilter.tint(Color.White)\r\n                                            )\r\n                                            Text(\r\n                                                text = \"${boardGame.minPlayers} - ${boardGame.maxPlayers}\",\r\n                                                style = MaterialTheme.typography.bodyLarge,\r\n                                                modifier = Modifier.fillMaxWidth(),\r\n                                                textAlign = TextAlign.Center,\r\n                                                fontWeight = FontWeight.Bold,\r\n                                                color = Color.White\r\n                                            )\r\n\r\n                                            Image(\r\n                                                painter = painterResource(id = R.drawable.av_timer),\r\n                                                contentDescription = null,\r\n                                                colorFilter = ColorFilter.tint(Color.White)\r\n                                            )\r\n                                            Text(\r\n                                                text = \"${boardGame.playingTime} min.\",\r\n                                                style = MaterialTheme.typography.bodyLarge,\r\n                                                modifier = Modifier.fillMaxWidth(),\r\n                                                textAlign = TextAlign.Center,\r\n                                                fontWeight = FontWeight.Bold,\r\n                                                color = Color.White\r\n                                            )\r\n\r\n                                        }\r\n                                        Column(\r\n                                            modifier = Modifier\r\n                                                .fillMaxHeight()\r\n                                                .fillMaxWidth(1f),\r\n                                            verticalArrangement = Arrangement.SpaceAround,\r\n                                            horizontalAlignment = Alignment.CenterHorizontally\r\n                                        ) {\r\n                                            Image(\r\n                                                painter = painterResource(id = R.drawable.elderly),\r\n                                                contentDescription = null,\r\n                                                colorFilter = ColorFilter.tint(Color.White)\r\n                                            )\r\n                                            Text(\r\n                                                text = \"${boardGame.age}+\",\r\n                                                style = MaterialTheme.typography.bodyLarge,\r\n                                                modifier = Modifier.fillMaxWidth(),\r\n                                                textAlign = TextAlign.Center,\r\n                                                fontWeight = FontWeight.Bold,\r\n                                                color = Color.White\r\n                                            )\r\n\r\n                                            Image(\r\n                                                painter = painterResource(id = R.drawable.fitness_center),\r\n                                                contentDescription = null,\r\n                                                colorFilter = ColorFilter.tint(Color.White)\r\n                                            )\r\n                                            Text(\r\n                                                text = boardGame.averageWeight,\r\n                                                style = MaterialTheme.typography.bodyLarge,\r\n                                                modifier = Modifier.fillMaxWidth(),\r\n                                                textAlign = TextAlign.Center,\r\n                                                fontWeight = FontWeight.Bold,\r\n                                                color = Color.White\r\n                                            )\r\n                                        }\r\n                                    }\r\n\r\n                            }\r\n                        }\r\n                        Box(modifier = Modifier.fillMaxSize()) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.85f)\r\n                                    .fillMaxHeight(0.863f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.Check,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(45.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomStart)\r\n                                        .clickable { boardGameInfoActivity.openRatingPopUp = !boardGameInfoActivity.openRatingPopUp\r\n                                        },\r\n                                    tint = Color.DarkGray\r\n                                )\r\n                            }\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.845f)\r\n                                    .align(Alignment.TopStart)\r\n                            ) {\r\n                                Text(\r\n                                    text = boardGame.ratingBGG,\r\n                                    style = MaterialTheme.typography.bodyLarge,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth(0.292f)\r\n                                        .align(Alignment.Bottom),\r\n                                    textAlign = TextAlign.Center,\r\n                                    fontWeight = FontWeight.Bold,\r\n                                    color = Color.White,\r\n                                    fontSize = 16.sp\r\n                                )\r\n                            }\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.798f)\r\n                                    .fillMaxHeight(0.845f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                            }\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(1f)\r\n                                    .fillMaxHeight(0.963f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.KeyboardArrowDown,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(60.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomCenter)\r\n                                        .clickable {\r\n                                            coroutineScope.launch {\r\n                                                pagerState.animateScrollToPage(1)\r\n                                            }\r\n                                        },\r\n                                    tint = Color.White,\r\n                                )\r\n                            }\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(0.693f)\r\n                                    .fillMaxHeight(0.823f)\r\n                                    .align(Alignment.TopCenter)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.Star,\r\n                                    contentDescription = \"contentdescription\",\r\n                                    modifier = Modifier\r\n                                        .size(25.dp)\r\n                                        .align(Alignment.BottomStart)\r\n                                        .background(Color.Gray, CircleShape)\r\n                                        .clickable {\r\n                                            boardGameInfoActivity.openRatingPopUp =\r\n                                                !boardGameInfoActivity.openRatingPopUp\r\n                                        },\r\n                                    tint = Color.White\r\n                                )\r\n                            }\r\n                        }\r\n                        AnimatedVisibility(\r\n                            visible = boardGameInfoActivity.openRatingPopUp,\r\n                            enter = slideInVertically(),\r\n                            exit = slideOutVertically()\r\n                        ) {\r\n                            PopupRatingDialog(\r\n                                boardGame = boardGame,\r\n                                viewModel = ratingsViewModel\r\n                            )\r\n                        }\r\n                        /*AnimatedVisibility(\r\n                            visible = boardGameInfoActivity.openAddPopUp,\r\n                            enter = slideInVertically(),\r\n                            exit = slideOutVertically()\r\n                        ) {\r\n                            PopupAddDialog()\r\n                        }*/\r\n                        AddToChallengeButton(boardGameInfoActivity = boardGameInfoActivity)\r\n                        favoriteButton(boardGameInfoActivity = boardGameInfoActivity)\r\n                    }\r\n                }\r\n                1 -> {\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxSize()\r\n                                .padding(16.dp),\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .fillMaxHeight(0.6f)\r\n                                    .padding(10.dp)\r\n                                    .clip(RoundedCornerShape(10.dp))\r\n                                    .background(MaterialTheme.colorScheme.background)\r\n                                    .align(Alignment.CenterHorizontally),\r\n                            ) {\r\n                                Column() {\r\n                                    tabView(\r\n                                        texts = listOf(\r\n                                            \"Description\",\r\n                                            \"General Info\"\r\n                                        )\r\n                                    ) {\r\n                                        selectedTabIndex = it;\r\n                                    }\r\n                                    when (selectedTabIndex) {\r\n                                        0 -> description(\r\n                                            boardGame\r\n                                        )\r\n\r\n                                        1 -> generalInfo(\r\n                                            boardGame\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Row {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .padding(30.dp)\r\n                                    .fillMaxWidth(1f)\r\n                                    .fillMaxHeight(0.225f)\r\n                                    .align(Alignment.CenterVertically)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Filled.KeyboardArrowUp,\r\n                                    contentDescription = \"contentDescription\",\r\n                                    modifier = Modifier\r\n                                        .size(60.dp)\r\n                                        .background(Color.DarkGray, CircleShape)\r\n                                        .align(Alignment.BottomCenter)\r\n                                        .clickable {\r\n                                            coroutineScope.launch {\r\n                                                pagerState.animateScrollToPage(0)\r\n                                            }\r\n                                        },\r\n                                    tint = Color.White,\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    )\r\n    Button(\r\n        onClick = {\r\n            navController.popBackStack()\r\n        },\r\n        modifier = Modifier\r\n            .width(60.dp)\r\n            .height(60.dp)\r\n            .padding(8.dp),\r\n        colors = ButtonDefaults.buttonColors(Color.Transparent)\r\n    ) {\r\n    }\r\n    Image(\r\n        painter = painterResource(id = R.drawable.ic_action_back),\r\n        contentDescription = null,\r\n        modifier = Modifier\r\n            .padding(18.dp)\r\n    )\r\n\r\n}\r\n\r\n@Composable\r\nfun PopupRatingDialog(boardGame: BoardGame, viewModel: RatingsViewModel) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxHeight()\r\n            .padding(horizontal = 20.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        Box {\r\n            Popup(\r\n                alignment = Alignment.Center,\r\n                properties = PopupProperties()\r\n            ) {\r\n                Box(\r\n                    Modifier\r\n                        .size(350.dp, 220.dp)\r\n                        .padding(top = 5.dp)\r\n                        .background(Color.DarkGray, RoundedCornerShape(10.dp))\r\n                ) {\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxSize(),\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        verticalArrangement = Arrangement.Center\r\n                    ) {\r\n                        ratingTab(boardGame = boardGame, viewModel = viewModel)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n                @Composable\r\n                fun PopupAddDialog() {\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .fillMaxHeight(0.5f)\r\n                            .padding(horizontal = 20.dp),\r\n                        verticalArrangement = Arrangement.Bottom,\r\n                        horizontalAlignment = Alignment.CenterHorizontally\r\n                    ) {\r\n                        Box {\r\n                            Popup(\r\n                                alignment = Alignment.Center,\r\n                                properties = PopupProperties()\r\n                            ) {\r\n                                Box(\r\n                                    Modifier\r\n                                        .size(450.dp, 300.dp)\r\n                                        .padding(top = 5.dp)\r\n                                        .background(\r\n                                            Color.DarkGray,\r\n                                            RoundedCornerShape(10.dp)\r\n                                        )\r\n                                ) {\r\n                                    Column(\r\n                                        modifier = Modifier\r\n                                            .fillMaxSize(),\r\n                                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                                        verticalArrangement = Arrangement.Center\r\n                                    ) {\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Composable\r\n                fun ratingTab(boardGame: BoardGame, viewModel: RatingsViewModel) {\r\n                    val averageRating = viewModel.averageRating\r\n                    Column {\r\n                        starDisplay(boardGame.ratingBGG, \"BGG rating\")\r\n                        starDisplay(\r\n                            averageRating.toString(),\r\n                            text = \"BoardBandit Average Rating\"\r\n                        )\r\n                        ratingDisplay(\r\n                            text = \"Your Rating\",\r\n                            viewModel = viewModel,\r\n                            boardGame = boardGame\r\n                        )\r\n                        Log.v(\"BGG Rating\", \"${boardGame.ratingBGG}\")\r\n                    }\r\n                }\r\n\r\n                @Composable\r\n                fun starDisplay(stars: String, text: String) {\r\n                    val numOfStars: Double = stars.toDouble()\r\n                    Column {\r\n                        Box {\r\n                            Text(text + \": $numOfStars / 10\")\r\n                        }\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .padding(2.dp)\r\n                                .wrapContentWidth(Alignment.Start)\r\n                        ) {\r\n                            Row() {\r\n                                for (i in 1..10) {\r\n                                    if (numOfStars >= i) {\r\n                                        Icon(\r\n                                            imageVector = Icons.Default.Star,\r\n                                            contentDescription = \"Favorite Icon\",\r\n                                            tint = Color.White,\r\n                                            modifier = Modifier\r\n                                                .size(34.dp)\r\n\r\n                                            // .border(BorderStroke(2.dp, color = Color.Black), 2.dp, Shape = ShapeTokens.BorderDefaultShape)\r\n                                        )\r\n                                    } else {\r\n                                        Icon(\r\n                                            imageVector = Icons.Default.Star,\r\n                                            contentDescription = \"Favorite Icon\",\r\n                                            tint = Color.Black,\r\n                                            modifier = Modifier\r\n                                                .size(34.dp)\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Composable\r\n                fun ratingDisplay(\r\n                    text: String,\r\n                    viewModel: RatingsViewModel,\r\n                    boardGame: BoardGame\r\n                ) {\r\n                    var numOfStars = 0.0\r\n                    val userRating = viewModel.userRating\r\n                    if (userRating == \"\") {\r\n                        numOfStars = 0.0\r\n                    } else {\r\n                        numOfStars = userRating!!.toDouble()\r\n                    }\r\n                    Column {\r\n                        Box {\r\n                            Text(text + \": $numOfStars / 10 - Rate by tapping a Star\")\r\n                        }\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .padding(2.dp)\r\n                                .wrapContentWidth(Alignment.Start)\r\n                        ) {\r\n                            Row() {\r\n                                for (i in 1..10) {\r\n                                    Icon(\r\n                                        imageVector = Icons.Outlined.Star,\r\n                                        contentDescription = \"Ratings Icon\",\r\n                                        tint = if (numOfStars >= i) Color.White else Color.Black,\r\n                                        modifier = Modifier\r\n                                            .size(34.dp)\r\n                                            .clickable {\r\n                                                viewModel.toggleRatings(\r\n                                                    boardGame,\r\n                                                    i.toString()\r\n                                                )\r\n                                            }\r\n                                        // .border(BorderStroke(2.dp, color = Color.Black), 2.dp, Shape = ShapeTokens.BorderDefaultShape)\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                @Composable\r\n                fun favoriteButton(\r\n                    boardGameInfoActivity: BoardGameInfoActivity,\r\n                ) {\r\n                    var triggerConfetti by remember { mutableStateOf(false) }\r\n                    val coroutineScope = rememberCoroutineScope()\r\n                    val snackbarHostState = remember { SnackbarHostState() }\r\n\r\n                    Box(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth(0.852f)\r\n                            .fillMaxHeight(0.75f)\r\n                    ) {\r\n                        Icon(imageVector = if (boardGameInfoActivity.boardGameData!!.isfavorite) Icons.Filled.Favorite else Icons.Outlined.FavoriteBorder,\r\n                            contentDescription = \"favoriteButton\",\r\n                            tint = Color.White,\r\n                            modifier = Modifier\r\n                                .size(40.dp)\r\n                                .background(Color.Transparent, CircleShape)\r\n                                .align(Alignment.BottomEnd)\r\n                                .clickable {\r\n                                    triggerConfetti = !triggerConfetti\r\n                                    //boardGameInfoActivity.toggleFavorite(\"static_user\", boardGameInfoActivity.boardGameData!!.id)\r\n                                    boardGameInfoActivity.snackbarFavoriteVisible =\r\n                                        !boardGameInfoActivity.snackbarFavoriteVisible\r\n                                    Log.v(\r\n                                        \"is still fav\",\r\n                                        \"${boardGameInfoActivity.boardGameData!!.isfavorite}\"\r\n                                    )\r\n                                    if (boardGameInfoActivity.snackbarFavoriteVisible) {\r\n                                        coroutineScope.launch {\r\n                                            val result = snackbarHostState.showSnackbar(\r\n                                                message = if (/*boardGameInfoActivity.boardGameData.isfavorite*/ true) \"Added to My Games\" else \"Removed from My Games\",\r\n                                                actionLabel = \"UNDO\",\r\n                                                duration = SnackbarDuration.Short,\r\n                                            )\r\n                                            if (result == SnackbarResult.ActionPerformed) {\r\n                                                //boardGameInfoActivity.toggleFavorite(\"static_user\", boardGameInfoActivity.boardGameData.id)\r\n                                            }\r\n                                            boardGameInfoActivity.snackbarFavoriteVisible =\r\n                                                false\r\n                                        }\r\n                                    }\r\n                                }\r\n                        )\r\n                        if (triggerConfetti) {\r\n                            ParticleSystem(\r\n                                18.dp,\r\n                                15.dp,\r\n                                200,\r\n                                modifier = Modifier\r\n                                    .align(Alignment.BottomEnd)\r\n                                    .size(55.dp)\r\n                                    .padding(8.dp)\r\n                            )\r\n                        }\r\n                    }\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        if (boardGameInfoActivity.snackbarFavoriteVisible) {\r\n                            SnackbarHost(\r\n                                hostState = snackbarHostState,\r\n                                modifier = Modifier\r\n                                    .align(Alignment.BottomCenter)\r\n                            ) { data ->\r\n                                Snackbar(\r\n                                    snackbarData = data,\r\n                                    actionColor = Color.LightGray, // Change the color of the \"UNDO\" text\r\n                                    containerColor = Color.Gray, // Change the background color of the Snackbar\r\n                                    contentColor = Color.White\r\n                                )// Change the color of the text in the Snackbar\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                data class Particle(\r\n                    val position: Offset,\r\n                    val velocity: Offset,\r\n                    val acceleration: Offset,\r\n                    val color: Color,\r\n                    val size: Float,\r\n                    val isCircle: Boolean\r\n                )\r\n\r\n                @Composable\r\n                fun ParticleSystem(\r\n                    posXInDp: Dp,\r\n                    posYInDp: Dp,\r\n                    size: Int,\r\n                    modifier: Modifier\r\n                ) {\r\n\r\n                    val posX = with(LocalDensity.current) { posXInDp.toPx() }\r\n                    val posY = with(LocalDensity.current) { posYInDp.toPx() }\r\n\r\n                    // List of particles\r\n                    val particles: MutableList<Particle> = mutableListOf()\r\n                    // For-loop that creates each individual particle and adds it to particles\r\n                    for (i in 1..size) {\r\n                        // Colors that particle can have\r\n                        val colors = listOf(\r\n                            Color(255, 0, 0, 255),\r\n                            Color(0, 255, 0, 255),\r\n                            Color(0, 0, 255, 255),\r\n                            Color(255, 152, 0, 255),\r\n                            Color(255, 235, 59, 255)\r\n                        )\r\n\r\n                        // Adding the particle to particles\r\n                        particles.add(\r\n                            Particle(\r\n                                Offset(posX.toFloat(), posY.toFloat()),\r\n                                Offset(1F, 1F),\r\n                                Offset(0F, 0F),\r\n                                colors[Random.nextInt(colors.size)],\r\n                                10f,\r\n                                Random.nextBoolean()\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    // Add all particles to a mutable state of particles\r\n                    val mutableParticles = remember { mutableStateListOf<Particle>() }\r\n                    mutableParticles.addAll(particles)\r\n\r\n                    var counter =\r\n                        0 // Counts how many iterations each particle has been updated\r\n\r\n                    // Updates each particle pos, vel, acc, size and alpha\r\n                    LaunchedEffect(Unit) {\r\n                        while (true) {\r\n                            val particlesCopy =\r\n                                ArrayList(mutableParticles.map { it.copy() })\r\n                            particlesCopy.forEachIndexed { index, particle ->\r\n                                mutableParticles[index] =\r\n                                    particle.copy(\r\n                                        position = particle.position + particle.velocity,\r\n                                        velocity = particle.velocity + particle.acceleration + Offset(\r\n                                            0.0f,\r\n                                            0.3f\r\n                                        ),\r\n                                        acceleration = Offset(\r\n                                            (Math.random() * 2 - 1).toFloat(),\r\n                                            (Math.random() * 2 - 1).toFloat()\r\n                                        ),\r\n                                        color = particle.color.copy(\r\n                                            red = particle.color.red,\r\n                                            green = particle.color.green,\r\n                                            blue = particle.color.blue,\r\n                                            alpha = (particle.color.alpha + (Math.random() * 5 - 4).toFloat()).coerceIn(\r\n                                                0F,\r\n                                                1F\r\n                                            )\r\n                                        ),\r\n                                        size = (particle.size + (Math.random() * 2 - 1).toFloat()).coerceIn(\r\n                                            8.0f,\r\n                                            12.0f\r\n                                        )\r\n                                    )\r\n\r\n                            }\r\n\r\n                            delay(16L) // Delay before next iteration\r\n                            counter += 1\r\n\r\n                            if (counter > 200) {\r\n                                mutableParticles.clear()\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Draws the canvas with the particles on\r\n                    Canvas(\r\n                        modifier = modifier\r\n                    ) {\r\n                        mutableParticles.forEach { particle ->\r\n                            if (particle.isCircle) {\r\n                                drawCircle(\r\n                                    color = particle.color,\r\n                                    alpha = 0.6F,\r\n                                    center = particle.position,\r\n                                    radius = particle.size\r\n                                )\r\n                            } else {\r\n                                drawRect(\r\n                                    color = particle.color,\r\n                                    alpha = 0.6F,\r\n                                    topLeft = particle.position,\r\n                                    size = Size(\r\n                                        particle.size,\r\n                                        particle.size\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Composable\r\n                fun AddToChallengeButton(boardGameInfoActivity: BoardGameInfoActivity) {\r\n                    val coroutineScope = rememberCoroutineScope()\r\n                    val snackbarHostState = remember { SnackbarHostState() }\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .padding(30.dp)\r\n                                .fillMaxWidth(0.85f)\r\n                                .fillMaxHeight(0.863f)\r\n                                .align(Alignment.TopCenter)\r\n                        ) {\r\n                            Icon(\r\n                                imageVector = Icons.Filled.Add,\r\n                                contentDescription = \"contentDescription\",\r\n                                modifier = Modifier\r\n                                    .size(45.dp)\r\n                                    .background(Color.DarkGray, CircleShape)\r\n                                    .align(Alignment.BottomEnd)\r\n                                    .clickable {\r\n                                        boardGameInfoActivity.snackbarChallengeVisible =\r\n                                            !boardGameInfoActivity.snackbarChallengeVisible\r\n                                        if (boardGameInfoActivity.snackbarChallengeVisible) {\r\n                                            coroutineScope.launch {\r\n                                                val result = snackbarHostState.showSnackbar(\r\n                                                    message = \"Congratulation on playing this game! Added to Challenges\",\r\n                                                    actionLabel = \"UNDO\",\r\n                                                    duration = SnackbarDuration.Short,\r\n                                                )\r\n                                                if (result == SnackbarResult.ActionPerformed) {\r\n                                                    //boardGameInfoActivity.(REMOVEFROMCHALLENGE)\r\n                                                }\r\n                                                boardGameInfoActivity.snackbarChallengeVisible =\r\n                                                    false\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                tint = Color.White,\r\n                            )\r\n                        }\r\n                        if (boardGameInfoActivity.snackbarChallengeVisible) {\r\n                            SnackbarHost(\r\n                                hostState = snackbarHostState,\r\n                                modifier = Modifier\r\n                                    .align(Alignment.BottomCenter)\r\n                            ) { data ->\r\n                                Snackbar(\r\n                                    snackbarData = data,\r\n                                    actionColor = Color.LightGray, // Change the color of the \"UNDO\" text\r\n                                    containerColor = Color.Gray, // Change the background color of the Snackbar\r\n                                    contentColor = Color.White\r\n                                )// Change the color of the text in the Snackbar\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt b/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt
--- a/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt	(revision 3ef5ffea40c5cfa988d37a059aff98f9d9baa14c)
+++ b/app/src/main/java/com/example/myapplication/views/SimpleBoardGameInfoActivity.kt	(date 1704812606789)
@@ -226,6 +226,34 @@
                                             .fillMaxSize()
                                             .clip(CircleShape)
                                     )
+                                    IconButton(
+                                        onClick = { showYouTubePlayer = true },
+                                        modifier = Modifier
+                                            .align(Alignment.Center)
+                                            .size(80.dp)
+                                    ) {
+                                        Icon(
+                                            imageVector = Icons.Filled.PlayArrow,
+                                            contentDescription = "Localized description",
+                                            tint = Color.White,
+                                            modifier = Modifier
+                                                .fillMaxSize()
+                                                .alpha(0.7f)
+                                        )
+                                    }
+                                    if (showYouTubePlayer) {
+                                        YoutubePlayer(youtubeVideoId = boardGameInfoActivity.youtubeID, lifecycleOwner = LocalLifecycleOwner.current)
+
+                                        // Close Button
+                                        IconButton(
+                                            onClick = { showYouTubePlayer = false},
+                                            modifier = Modifier
+                                                .align(Alignment.TopEnd)
+                                                .padding(16.dp)
+                                        ) {
+                                            Icon(imageVector = Icons.Default.Close, contentDescription = "Close", tint = Color.White)
+                                        }
+                                    }
                                 }
                                 Row(
                                     modifier = Modifier
